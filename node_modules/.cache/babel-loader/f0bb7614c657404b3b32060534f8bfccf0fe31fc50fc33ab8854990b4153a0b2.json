{"ast":null,"code":"/**\n * Utility functions for searching and filtering business data\n */\n\n/**\n * Filters businesses based on search criteria\n * @param {Array} businesses - Array of business objects\n * @param {Object} filters - Filter criteria object\n * @returns {Array} Filtered array of businesses\n */\nexport const filterBusinesses = (businesses, filters) => {\n  const {\n    searchTerm,\n    selectedStates,\n    selectedIndustries,\n    selectedRegions\n  } = filters;\n  return businesses.filter(business => {\n    // Text search across multiple fields\n    const matchesSearch = !searchTerm || business.name.toLowerCase().includes(searchTerm.toLowerCase()) || business.description.toLowerCase().includes(searchTerm.toLowerCase()) || business.tagline.toLowerCase().includes(searchTerm.toLowerCase()) || business.location.town.toLowerCase().includes(searchTerm.toLowerCase()) || business.location.region.toLowerCase().includes(searchTerm.toLowerCase()) || business.categories.primary.toLowerCase().includes(searchTerm.toLowerCase()) || business.tags.services.some(service => service.toLowerCase().includes(searchTerm.toLowerCase()));\n\n    // State filter\n    const matchesState = selectedStates.length === 0 || selectedStates.includes(business.location.state);\n\n    // Industry filter\n    const matchesIndustry = selectedIndustries.length === 0 || selectedIndustries.includes(business.industry);\n\n    // Region filter\n    const matchesRegion = selectedRegions.length === 0 || selectedRegions.includes(business.location.region);\n    return matchesSearch && matchesState && matchesIndustry && matchesRegion;\n  });\n};\n\n/**\n * Sorts businesses by specified criteria\n * @param {Array} businesses - Array of business objects\n * @param {string} sortBy - Sort criteria ('name', 'location', 'industry')\n * @returns {Array} Sorted array of businesses\n */\nexport const sortBusinesses = (businesses, sortBy) => {\n  const sorted = [...businesses];\n  switch (sortBy) {\n    case 'name':\n      return sorted.sort((a, b) => a.name.localeCompare(b.name));\n    case 'location':\n      return sorted.sort((a, b) => {\n        const locationA = `${a.location.town}, ${a.location.state}`;\n        const locationB = `${b.location.town}, ${b.location.state}`;\n        return locationA.localeCompare(locationB);\n      });\n    case 'industry':\n      return sorted.sort((a, b) => a.industry.localeCompare(b.industry));\n    default:\n      return sorted;\n  }\n};\n\n/**\n * Gets unique values from business data for filter options\n * @param {Array} businesses - Array of business objects\n * @param {string} field - Field to extract unique values from\n * @returns {Array} Array of unique values\n */\nexport const getUniqueValues = (businesses, field) => {\n  const values = new Set();\n  businesses.forEach(business => {\n    switch (field) {\n      case 'states':\n        values.add(business.location.state);\n        break;\n      case 'regions':\n        values.add(business.location.region);\n        break;\n      case 'industries':\n        values.add(business.industry);\n        break;\n      case 'towns':\n        values.add(business.location.town);\n        break;\n      default:\n        break;\n    }\n  });\n  return Array.from(values).sort();\n};\n\n/**\n * Validates search input and sanitizes it\n * @param {string} input - User search input\n * @returns {string} Sanitized search term\n */\nexport const sanitizeSearchInput = input => {\n  if (!input || typeof input !== 'string') return '';\n\n  // Remove potentially harmful characters and trim whitespace\n  return input.trim().replace(/[<>]/g, '');\n};\n\n/**\n * Debounce function to limit search frequency\n * @param {Function} func - Function to debounce\n * @param {number} delay - Delay in milliseconds\n * @returns {Function} Debounced function\n */\nexport const debounce = (func, delay) => {\n  let timeoutId;\n  return (...args) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func.apply(null, args), delay);\n  };\n};\n\n/**\n * Formats location string for display\n * @param {Object} location - Location object with town, state, region\n * @returns {string} Formatted location string\n */\nexport const formatLocation = location => {\n  return `${location.town}, ${location.state}`;\n};\n\n/**\n * Formats location with region for detailed display\n * @param {Object} location - Location object with town, state, region\n * @returns {string} Formatted location string with region\n */\nexport const formatLocationWithRegion = location => {\n  return `${location.town}, ${location.region}, ${location.state}`;\n};\n\n/**\n * Truncates text to specified length with ellipsis\n * @param {string} text - Text to truncate\n * @param {number} maxLength - Maximum length before truncation\n * @returns {string} Truncated text\n */\nexport const truncateText = (text, maxLength) => {\n  if (!text || text.length <= maxLength) return text;\n  return text.substring(0, maxLength - 3) + '...';\n};","map":{"version":3,"names":["filterBusinesses","businesses","filters","searchTerm","selectedStates","selectedIndustries","selectedRegions","filter","business","matchesSearch","name","toLowerCase","includes","description","tagline","location","town","region","categories","primary","tags","services","some","service","matchesState","length","state","matchesIndustry","industry","matchesRegion","sortBusinesses","sortBy","sorted","sort","a","b","localeCompare","locationA","locationB","getUniqueValues","field","values","Set","forEach","add","Array","from","sanitizeSearchInput","input","trim","replace","debounce","func","delay","timeoutId","args","clearTimeout","setTimeout","apply","formatLocation","formatLocationWithRegion","truncateText","text","maxLength","substring"],"sources":["C:/Users/Hard-Worker/Desktop/rural-business-directory/src/utils/searchUtils.js"],"sourcesContent":["/**\n * Utility functions for searching and filtering business data\n */\n\n/**\n * Filters businesses based on search criteria\n * @param {Array} businesses - Array of business objects\n * @param {Object} filters - Filter criteria object\n * @returns {Array} Filtered array of businesses\n */\nexport const filterBusinesses = (businesses, filters) => {\n  const { searchTerm, selectedStates, selectedIndustries, selectedRegions } = filters;\n\n  return businesses.filter(business => {\n    // Text search across multiple fields\n    const matchesSearch = !searchTerm || \n      business.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      business.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      business.tagline.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      business.location.town.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      business.location.region.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      business.categories.primary.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      business.tags.services.some(service => \n        service.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n\n    // State filter\n    const matchesState = selectedStates.length === 0 || \n      selectedStates.includes(business.location.state);\n\n    // Industry filter\n    const matchesIndustry = selectedIndustries.length === 0 || \n      selectedIndustries.includes(business.industry);\n\n    // Region filter\n    const matchesRegion = selectedRegions.length === 0 || \n      selectedRegions.includes(business.location.region);\n\n    return matchesSearch && matchesState && matchesIndustry && matchesRegion;\n  });\n};\n\n/**\n * Sorts businesses by specified criteria\n * @param {Array} businesses - Array of business objects\n * @param {string} sortBy - Sort criteria ('name', 'location', 'industry')\n * @returns {Array} Sorted array of businesses\n */\nexport const sortBusinesses = (businesses, sortBy) => {\n  const sorted = [...businesses];\n\n  switch (sortBy) {\n    case 'name':\n      return sorted.sort((a, b) => a.name.localeCompare(b.name));\n    case 'location':\n      return sorted.sort((a, b) => {\n        const locationA = `${a.location.town}, ${a.location.state}`;\n        const locationB = `${b.location.town}, ${b.location.state}`;\n        return locationA.localeCompare(locationB);\n      });\n    case 'industry':\n      return sorted.sort((a, b) => a.industry.localeCompare(b.industry));\n    default:\n      return sorted;\n  }\n};\n\n/**\n * Gets unique values from business data for filter options\n * @param {Array} businesses - Array of business objects\n * @param {string} field - Field to extract unique values from\n * @returns {Array} Array of unique values\n */\nexport const getUniqueValues = (businesses, field) => {\n  const values = new Set();\n  \n  businesses.forEach(business => {\n    switch (field) {\n      case 'states':\n        values.add(business.location.state);\n        break;\n      case 'regions':\n        values.add(business.location.region);\n        break;\n      case 'industries':\n        values.add(business.industry);\n        break;\n      case 'towns':\n        values.add(business.location.town);\n        break;\n      default:\n        break;\n    }\n  });\n\n  return Array.from(values).sort();\n};\n\n/**\n * Validates search input and sanitizes it\n * @param {string} input - User search input\n * @returns {string} Sanitized search term\n */\nexport const sanitizeSearchInput = (input) => {\n  if (!input || typeof input !== 'string') return '';\n  \n  // Remove potentially harmful characters and trim whitespace\n  return input.trim().replace(/[<>]/g, '');\n};\n\n/**\n * Debounce function to limit search frequency\n * @param {Function} func - Function to debounce\n * @param {number} delay - Delay in milliseconds\n * @returns {Function} Debounced function\n */\nexport const debounce = (func, delay) => {\n  let timeoutId;\n  \n  return (...args) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func.apply(null, args), delay);\n  };\n};\n\n/**\n * Formats location string for display\n * @param {Object} location - Location object with town, state, region\n * @returns {string} Formatted location string\n */\nexport const formatLocation = (location) => {\n  return `${location.town}, ${location.state}`;\n};\n\n/**\n * Formats location with region for detailed display\n * @param {Object} location - Location object with town, state, region\n * @returns {string} Formatted location string with region\n */\nexport const formatLocationWithRegion = (location) => {\n  return `${location.town}, ${location.region}, ${location.state}`;\n};\n\n/**\n * Truncates text to specified length with ellipsis\n * @param {string} text - Text to truncate\n * @param {number} maxLength - Maximum length before truncation\n * @returns {string} Truncated text\n */\nexport const truncateText = (text, maxLength) => {\n  if (!text || text.length <= maxLength) return text;\n  return text.substring(0, maxLength - 3) + '...';\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,gBAAgB,GAAGA,CAACC,UAAU,EAAEC,OAAO,KAAK;EACvD,MAAM;IAAEC,UAAU;IAAEC,cAAc;IAAEC,kBAAkB;IAAEC;EAAgB,CAAC,GAAGJ,OAAO;EAEnF,OAAOD,UAAU,CAACM,MAAM,CAACC,QAAQ,IAAI;IACnC;IACA,MAAMC,aAAa,GAAG,CAACN,UAAU,IAC/BK,QAAQ,CAACE,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACT,UAAU,CAACQ,WAAW,CAAC,CAAC,CAAC,IAC9DH,QAAQ,CAACK,WAAW,CAACF,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACT,UAAU,CAACQ,WAAW,CAAC,CAAC,CAAC,IACrEH,QAAQ,CAACM,OAAO,CAACH,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACT,UAAU,CAACQ,WAAW,CAAC,CAAC,CAAC,IACjEH,QAAQ,CAACO,QAAQ,CAACC,IAAI,CAACL,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACT,UAAU,CAACQ,WAAW,CAAC,CAAC,CAAC,IACvEH,QAAQ,CAACO,QAAQ,CAACE,MAAM,CAACN,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACT,UAAU,CAACQ,WAAW,CAAC,CAAC,CAAC,IACzEH,QAAQ,CAACU,UAAU,CAACC,OAAO,CAACR,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACT,UAAU,CAACQ,WAAW,CAAC,CAAC,CAAC,IAC5EH,QAAQ,CAACY,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACC,OAAO,IACjCA,OAAO,CAACZ,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACT,UAAU,CAACQ,WAAW,CAAC,CAAC,CACzD,CAAC;;IAEH;IACA,MAAMa,YAAY,GAAGpB,cAAc,CAACqB,MAAM,KAAK,CAAC,IAC9CrB,cAAc,CAACQ,QAAQ,CAACJ,QAAQ,CAACO,QAAQ,CAACW,KAAK,CAAC;;IAElD;IACA,MAAMC,eAAe,GAAGtB,kBAAkB,CAACoB,MAAM,KAAK,CAAC,IACrDpB,kBAAkB,CAACO,QAAQ,CAACJ,QAAQ,CAACoB,QAAQ,CAAC;;IAEhD;IACA,MAAMC,aAAa,GAAGvB,eAAe,CAACmB,MAAM,KAAK,CAAC,IAChDnB,eAAe,CAACM,QAAQ,CAACJ,QAAQ,CAACO,QAAQ,CAACE,MAAM,CAAC;IAEpD,OAAOR,aAAa,IAAIe,YAAY,IAAIG,eAAe,IAAIE,aAAa;EAC1E,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAC7B,UAAU,EAAE8B,MAAM,KAAK;EACpD,MAAMC,MAAM,GAAG,CAAC,GAAG/B,UAAU,CAAC;EAE9B,QAAQ8B,MAAM;IACZ,KAAK,MAAM;MACT,OAAOC,MAAM,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACxB,IAAI,CAAC0B,aAAa,CAACD,CAAC,CAACzB,IAAI,CAAC,CAAC;IAC5D,KAAK,UAAU;MACb,OAAOsB,MAAM,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QAC3B,MAAME,SAAS,GAAG,GAAGH,CAAC,CAACnB,QAAQ,CAACC,IAAI,KAAKkB,CAAC,CAACnB,QAAQ,CAACW,KAAK,EAAE;QAC3D,MAAMY,SAAS,GAAG,GAAGH,CAAC,CAACpB,QAAQ,CAACC,IAAI,KAAKmB,CAAC,CAACpB,QAAQ,CAACW,KAAK,EAAE;QAC3D,OAAOW,SAAS,CAACD,aAAa,CAACE,SAAS,CAAC;MAC3C,CAAC,CAAC;IACJ,KAAK,UAAU;MACb,OAAON,MAAM,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACN,QAAQ,CAACQ,aAAa,CAACD,CAAC,CAACP,QAAQ,CAAC,CAAC;IACpE;MACE,OAAOI,MAAM;EACjB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,eAAe,GAAGA,CAACtC,UAAU,EAAEuC,KAAK,KAAK;EACpD,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC;EAExBzC,UAAU,CAAC0C,OAAO,CAACnC,QAAQ,IAAI;IAC7B,QAAQgC,KAAK;MACX,KAAK,QAAQ;QACXC,MAAM,CAACG,GAAG,CAACpC,QAAQ,CAACO,QAAQ,CAACW,KAAK,CAAC;QACnC;MACF,KAAK,SAAS;QACZe,MAAM,CAACG,GAAG,CAACpC,QAAQ,CAACO,QAAQ,CAACE,MAAM,CAAC;QACpC;MACF,KAAK,YAAY;QACfwB,MAAM,CAACG,GAAG,CAACpC,QAAQ,CAACoB,QAAQ,CAAC;QAC7B;MACF,KAAK,OAAO;QACVa,MAAM,CAACG,GAAG,CAACpC,QAAQ,CAACO,QAAQ,CAACC,IAAI,CAAC;QAClC;MACF;QACE;IACJ;EACF,CAAC,CAAC;EAEF,OAAO6B,KAAK,CAACC,IAAI,CAACL,MAAM,CAAC,CAACR,IAAI,CAAC,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMc,mBAAmB,GAAIC,KAAK,IAAK;EAC5C,IAAI,CAACA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE,OAAO,EAAE;;EAElD;EACA,OAAOA,KAAK,CAACC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK;EACvC,IAAIC,SAAS;EAEb,OAAO,CAAC,GAAGC,IAAI,KAAK;IAClBC,YAAY,CAACF,SAAS,CAAC;IACvBA,SAAS,GAAGG,UAAU,CAAC,MAAML,IAAI,CAACM,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC,EAAEF,KAAK,CAAC;EAC7D,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,cAAc,GAAI5C,QAAQ,IAAK;EAC1C,OAAO,GAAGA,QAAQ,CAACC,IAAI,KAAKD,QAAQ,CAACW,KAAK,EAAE;AAC9C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMkC,wBAAwB,GAAI7C,QAAQ,IAAK;EACpD,OAAO,GAAGA,QAAQ,CAACC,IAAI,KAAKD,QAAQ,CAACE,MAAM,KAAKF,QAAQ,CAACW,KAAK,EAAE;AAClE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMmC,YAAY,GAAGA,CAACC,IAAI,EAAEC,SAAS,KAAK;EAC/C,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACrC,MAAM,IAAIsC,SAAS,EAAE,OAAOD,IAAI;EAClD,OAAOA,IAAI,CAACE,SAAS,CAAC,CAAC,EAAED,SAAS,GAAG,CAAC,CAAC,GAAG,KAAK;AACjD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}