{"ast":null,"code":"import{useState,useEffect,useMemo}from'react';import{filterBusinesses,sortBusinesses,debounce}from'../utils/searchUtils';/**\n * Custom hook for managing business search and filtering functionality\n * @param {Array} businessData - Array of business objects to search/filter\n * @returns {Object} Search state and handlers\n */export const useBusinessSearch=businessData=>{// Search and filter state\nconst[searchTerm,setSearchTerm]=useState('');const[selectedStates,setSelectedStates]=useState([]);const[selectedIndustries,setSelectedIndustries]=useState([]);const[selectedRegions,setSelectedRegions]=useState([]);const[sortBy,setSortBy]=useState('name');const[isLoading,setIsLoading]=useState(false);// Debounced search to avoid excessive filtering\nconst debouncedSearch=useMemo(()=>debounce(term=>{setSearchTerm(term);setIsLoading(false);},300),[]);// Handle search input with loading state\nconst handleSearchChange=value=>{setIsLoading(true);debouncedSearch(value);};// Filtered and sorted results\nconst filteredBusinesses=useMemo(()=>{const filters={searchTerm,selectedStates,selectedIndustries,selectedRegions};const filtered=filterBusinesses(businessData,filters);return sortBusinesses(filtered,sortBy);},[businessData,searchTerm,selectedStates,selectedIndustries,selectedRegions,sortBy]);// Reset all filters\nconst clearAllFilters=()=>{setSearchTerm('');setSelectedStates([]);setSelectedIndustries([]);setSelectedRegions([]);setSortBy('name');};// Toggle filter selections\nconst toggleStateFilter=state=>{setSelectedStates(prev=>prev.includes(state)?prev.filter(s=>s!==state):[...prev,state]);};const toggleIndustryFilter=industry=>{setSelectedIndustries(prev=>prev.includes(industry)?prev.filter(i=>i!==industry):[...prev,industry]);};const toggleRegionFilter=region=>{setSelectedRegions(prev=>prev.includes(region)?prev.filter(r=>r!==region):[...prev,region]);};// Check if any filters are active\nconst hasActiveFilters=searchTerm||selectedStates.length>0||selectedIndustries.length>0||selectedRegions.length>0;return{// State\nsearchTerm,selectedStates,selectedIndustries,selectedRegions,sortBy,isLoading,filteredBusinesses,hasActiveFilters,// Handlers\nhandleSearchChange,setSelectedStates,setSelectedIndustries,setSelectedRegions,setSortBy,toggleStateFilter,toggleIndustryFilter,toggleRegionFilter,clearAllFilters};};","map":{"version":3,"names":["useState","useEffect","useMemo","filterBusinesses","sortBusinesses","debounce","useBusinessSearch","businessData","searchTerm","setSearchTerm","selectedStates","setSelectedStates","selectedIndustries","setSelectedIndustries","selectedRegions","setSelectedRegions","sortBy","setSortBy","isLoading","setIsLoading","debouncedSearch","term","handleSearchChange","value","filteredBusinesses","filters","filtered","clearAllFilters","toggleStateFilter","state","prev","includes","filter","s","toggleIndustryFilter","industry","i","toggleRegionFilter","region","r","hasActiveFilters","length"],"sources":["C:/Users/Hard-Worker/Desktop/rural-business-directory/src/hooks/useBusinessSearch.js"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\nimport { filterBusinesses, sortBusinesses, debounce } from '../utils/searchUtils';\n\n/**\n * Custom hook for managing business search and filtering functionality\n * @param {Array} businessData - Array of business objects to search/filter\n * @returns {Object} Search state and handlers\n */\nexport const useBusinessSearch = (businessData) => {\n  // Search and filter state\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedStates, setSelectedStates] = useState([]);\n  const [selectedIndustries, setSelectedIndustries] = useState([]);\n  const [selectedRegions, setSelectedRegions] = useState([]);\n  const [sortBy, setSortBy] = useState('name');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Debounced search to avoid excessive filtering\n  const debouncedSearch = useMemo(\n    () => debounce((term) => {\n      setSearchTerm(term);\n      setIsLoading(false);\n    }, 300),\n    []\n  );\n\n  // Handle search input with loading state\n  const handleSearchChange = (value) => {\n    setIsLoading(true);\n    debouncedSearch(value);\n  };\n\n  // Filtered and sorted results\n  const filteredBusinesses = useMemo(() => {\n    const filters = {\n      searchTerm,\n      selectedStates,\n      selectedIndustries,\n      selectedRegions\n    };\n\n    const filtered = filterBusinesses(businessData, filters);\n    return sortBusinesses(filtered, sortBy);\n  }, [businessData, searchTerm, selectedStates, selectedIndustries, selectedRegions, sortBy]);\n\n  // Reset all filters\n  const clearAllFilters = () => {\n    setSearchTerm('');\n    setSelectedStates([]);\n    setSelectedIndustries([]);\n    setSelectedRegions([]);\n    setSortBy('name');\n  };\n\n  // Toggle filter selections\n  const toggleStateFilter = (state) => {\n    setSelectedStates(prev => \n      prev.includes(state) \n        ? prev.filter(s => s !== state)\n        : [...prev, state]\n    );\n  };\n\n  const toggleIndustryFilter = (industry) => {\n    setSelectedIndustries(prev => \n      prev.includes(industry) \n        ? prev.filter(i => i !== industry)\n        : [...prev, industry]\n    );\n  };\n\n  const toggleRegionFilter = (region) => {\n    setSelectedRegions(prev => \n      prev.includes(region) \n        ? prev.filter(r => r !== region)\n        : [...prev, region]\n    );\n  };\n\n  // Check if any filters are active\n  const hasActiveFilters = searchTerm || \n    selectedStates.length > 0 || \n    selectedIndustries.length > 0 || \n    selectedRegions.length > 0;\n\n  return {\n    // State\n    searchTerm,\n    selectedStates,\n    selectedIndustries,\n    selectedRegions,\n    sortBy,\n    isLoading,\n    filteredBusinesses,\n    hasActiveFilters,\n    \n    // Handlers\n    handleSearchChange,\n    setSelectedStates,\n    setSelectedIndustries,\n    setSelectedRegions,\n    setSortBy,\n    toggleStateFilter,\n    toggleIndustryFilter,\n    toggleRegionFilter,\n    clearAllFilters\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}