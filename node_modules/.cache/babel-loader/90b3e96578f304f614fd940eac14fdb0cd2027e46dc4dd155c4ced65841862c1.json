{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useMemo } from 'react';\nimport { filterBusinesses, sortBusinesses, debounce } from '../utils/searchUtils';\n\n/**\n * Custom hook for managing business search and filtering functionality\n * @param {Array} businessData - Array of business objects to search/filter\n * @returns {Object} Search state and handlers\n */\nexport const useBusinessSearch = businessData => {\n  _s();\n  // Search and filter state\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedStates, setSelectedStates] = useState([]);\n  const [selectedIndustries, setSelectedIndustries] = useState([]);\n  const [selectedRegions, setSelectedRegions] = useState([]);\n  const [sortBy, setSortBy] = useState('name');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Debounced search to avoid excessive filtering\n  const debouncedSearch = useMemo(() => debounce(term => {\n    setSearchTerm(term);\n    setIsLoading(false);\n  }, 300), []);\n\n  // Handle search input with loading state\n  const handleSearchChange = value => {\n    setIsLoading(true);\n    debouncedSearch(value);\n  };\n\n  // Filtered and sorted results\n  const filteredBusinesses = useMemo(() => {\n    const filters = {\n      searchTerm,\n      selectedStates,\n      selectedIndustries,\n      selectedRegions\n    };\n    const filtered = filterBusinesses(businessData, filters);\n    return sortBusinesses(filtered, sortBy);\n  }, [businessData, searchTerm, selectedStates, selectedIndustries, selectedRegions, sortBy]);\n\n  // Reset all filters\n  const clearAllFilters = () => {\n    setSearchTerm('');\n    setSelectedStates([]);\n    setSelectedIndustries([]);\n    setSelectedRegions([]);\n    setSortBy('name');\n  };\n\n  // Toggle filter selections\n  const toggleStateFilter = state => {\n    setSelectedStates(prev => prev.includes(state) ? prev.filter(s => s !== state) : [...prev, state]);\n  };\n  const toggleIndustryFilter = industry => {\n    setSelectedIndustries(prev => prev.includes(industry) ? prev.filter(i => i !== industry) : [...prev, industry]);\n  };\n  const toggleRegionFilter = region => {\n    setSelectedRegions(prev => prev.includes(region) ? prev.filter(r => r !== region) : [...prev, region]);\n  };\n\n  // Check if any filters are active\n  const hasActiveFilters = searchTerm || selectedStates.length > 0 || selectedIndustries.length > 0 || selectedRegions.length > 0;\n  return {\n    // State\n    searchTerm,\n    selectedStates,\n    selectedIndustries,\n    selectedRegions,\n    sortBy,\n    isLoading,\n    filteredBusinesses,\n    hasActiveFilters,\n    // Handlers\n    handleSearchChange,\n    setSelectedStates,\n    setSelectedIndustries,\n    setSelectedRegions,\n    setSortBy,\n    toggleStateFilter,\n    toggleIndustryFilter,\n    toggleRegionFilter,\n    clearAllFilters\n  };\n};\n_s(useBusinessSearch, \"xml6sRJwePt/tkVI90Tlwbj3l/4=\");","map":{"version":3,"names":["useState","useEffect","useMemo","filterBusinesses","sortBusinesses","debounce","useBusinessSearch","businessData","_s","searchTerm","setSearchTerm","selectedStates","setSelectedStates","selectedIndustries","setSelectedIndustries","selectedRegions","setSelectedRegions","sortBy","setSortBy","isLoading","setIsLoading","debouncedSearch","term","handleSearchChange","value","filteredBusinesses","filters","filtered","clearAllFilters","toggleStateFilter","state","prev","includes","filter","s","toggleIndustryFilter","industry","i","toggleRegionFilter","region","r","hasActiveFilters","length"],"sources":["C:/Users/Hard-Worker/Desktop/rural-business-directory/src/hooks/useBusinessSearch.js"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\nimport { filterBusinesses, sortBusinesses, debounce } from '../utils/searchUtils';\n\n/**\n * Custom hook for managing business search and filtering functionality\n * @param {Array} businessData - Array of business objects to search/filter\n * @returns {Object} Search state and handlers\n */\nexport const useBusinessSearch = (businessData) => {\n  // Search and filter state\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedStates, setSelectedStates] = useState([]);\n  const [selectedIndustries, setSelectedIndustries] = useState([]);\n  const [selectedRegions, setSelectedRegions] = useState([]);\n  const [sortBy, setSortBy] = useState('name');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Debounced search to avoid excessive filtering\n  const debouncedSearch = useMemo(\n    () => debounce((term) => {\n      setSearchTerm(term);\n      setIsLoading(false);\n    }, 300),\n    []\n  );\n\n  // Handle search input with loading state\n  const handleSearchChange = (value) => {\n    setIsLoading(true);\n    debouncedSearch(value);\n  };\n\n  // Filtered and sorted results\n  const filteredBusinesses = useMemo(() => {\n    const filters = {\n      searchTerm,\n      selectedStates,\n      selectedIndustries,\n      selectedRegions\n    };\n\n    const filtered = filterBusinesses(businessData, filters);\n    return sortBusinesses(filtered, sortBy);\n  }, [businessData, searchTerm, selectedStates, selectedIndustries, selectedRegions, sortBy]);\n\n  // Reset all filters\n  const clearAllFilters = () => {\n    setSearchTerm('');\n    setSelectedStates([]);\n    setSelectedIndustries([]);\n    setSelectedRegions([]);\n    setSortBy('name');\n  };\n\n  // Toggle filter selections\n  const toggleStateFilter = (state) => {\n    setSelectedStates(prev => \n      prev.includes(state) \n        ? prev.filter(s => s !== state)\n        : [...prev, state]\n    );\n  };\n\n  const toggleIndustryFilter = (industry) => {\n    setSelectedIndustries(prev => \n      prev.includes(industry) \n        ? prev.filter(i => i !== industry)\n        : [...prev, industry]\n    );\n  };\n\n  const toggleRegionFilter = (region) => {\n    setSelectedRegions(prev => \n      prev.includes(region) \n        ? prev.filter(r => r !== region)\n        : [...prev, region]\n    );\n  };\n\n  // Check if any filters are active\n  const hasActiveFilters = searchTerm || \n    selectedStates.length > 0 || \n    selectedIndustries.length > 0 || \n    selectedRegions.length > 0;\n\n  return {\n    // State\n    searchTerm,\n    selectedStates,\n    selectedIndustries,\n    selectedRegions,\n    sortBy,\n    isLoading,\n    filteredBusinesses,\n    hasActiveFilters,\n    \n    // Handlers\n    handleSearchChange,\n    setSelectedStates,\n    setSelectedIndustries,\n    setSelectedRegions,\n    setSortBy,\n    toggleStateFilter,\n    toggleIndustryFilter,\n    toggleRegionFilter,\n    clearAllFilters\n  };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AACpD,SAASC,gBAAgB,EAAEC,cAAc,EAAEC,QAAQ,QAAQ,sBAAsB;;AAEjF;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAIC,YAAY,IAAK;EAAAC,EAAA;EACjD;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACa,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACiB,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAC,MAAM,CAAC;EAC5C,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAMqB,eAAe,GAAGnB,OAAO,CAC7B,MAAMG,QAAQ,CAAEiB,IAAI,IAAK;IACvBZ,aAAa,CAACY,IAAI,CAAC;IACnBF,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,GAAG,CAAC,EACP,EACF,CAAC;;EAED;EACA,MAAMG,kBAAkB,GAAIC,KAAK,IAAK;IACpCJ,YAAY,CAAC,IAAI,CAAC;IAClBC,eAAe,CAACG,KAAK,CAAC;EACxB,CAAC;;EAED;EACA,MAAMC,kBAAkB,GAAGvB,OAAO,CAAC,MAAM;IACvC,MAAMwB,OAAO,GAAG;MACdjB,UAAU;MACVE,cAAc;MACdE,kBAAkB;MAClBE;IACF,CAAC;IAED,MAAMY,QAAQ,GAAGxB,gBAAgB,CAACI,YAAY,EAAEmB,OAAO,CAAC;IACxD,OAAOtB,cAAc,CAACuB,QAAQ,EAAEV,MAAM,CAAC;EACzC,CAAC,EAAE,CAACV,YAAY,EAAEE,UAAU,EAAEE,cAAc,EAAEE,kBAAkB,EAAEE,eAAe,EAAEE,MAAM,CAAC,CAAC;;EAE3F;EACA,MAAMW,eAAe,GAAGA,CAAA,KAAM;IAC5BlB,aAAa,CAAC,EAAE,CAAC;IACjBE,iBAAiB,CAAC,EAAE,CAAC;IACrBE,qBAAqB,CAAC,EAAE,CAAC;IACzBE,kBAAkB,CAAC,EAAE,CAAC;IACtBE,SAAS,CAAC,MAAM,CAAC;EACnB,CAAC;;EAED;EACA,MAAMW,iBAAiB,GAAIC,KAAK,IAAK;IACnClB,iBAAiB,CAACmB,IAAI,IACpBA,IAAI,CAACC,QAAQ,CAACF,KAAK,CAAC,GAChBC,IAAI,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKJ,KAAK,CAAC,GAC7B,CAAC,GAAGC,IAAI,EAAED,KAAK,CACrB,CAAC;EACH,CAAC;EAED,MAAMK,oBAAoB,GAAIC,QAAQ,IAAK;IACzCtB,qBAAqB,CAACiB,IAAI,IACxBA,IAAI,CAACC,QAAQ,CAACI,QAAQ,CAAC,GACnBL,IAAI,CAACE,MAAM,CAACI,CAAC,IAAIA,CAAC,KAAKD,QAAQ,CAAC,GAChC,CAAC,GAAGL,IAAI,EAAEK,QAAQ,CACxB,CAAC;EACH,CAAC;EAED,MAAME,kBAAkB,GAAIC,MAAM,IAAK;IACrCvB,kBAAkB,CAACe,IAAI,IACrBA,IAAI,CAACC,QAAQ,CAACO,MAAM,CAAC,GACjBR,IAAI,CAACE,MAAM,CAACO,CAAC,IAAIA,CAAC,KAAKD,MAAM,CAAC,GAC9B,CAAC,GAAGR,IAAI,EAAEQ,MAAM,CACtB,CAAC;EACH,CAAC;;EAED;EACA,MAAME,gBAAgB,GAAGhC,UAAU,IACjCE,cAAc,CAAC+B,MAAM,GAAG,CAAC,IACzB7B,kBAAkB,CAAC6B,MAAM,GAAG,CAAC,IAC7B3B,eAAe,CAAC2B,MAAM,GAAG,CAAC;EAE5B,OAAO;IACL;IACAjC,UAAU;IACVE,cAAc;IACdE,kBAAkB;IAClBE,eAAe;IACfE,MAAM;IACNE,SAAS;IACTM,kBAAkB;IAClBgB,gBAAgB;IAEhB;IACAlB,kBAAkB;IAClBX,iBAAiB;IACjBE,qBAAqB;IACrBE,kBAAkB;IAClBE,SAAS;IACTW,iBAAiB;IACjBM,oBAAoB;IACpBG,kBAAkB;IAClBV;EACF,CAAC;AACH,CAAC;AAACpB,EAAA,CAnGWF,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}