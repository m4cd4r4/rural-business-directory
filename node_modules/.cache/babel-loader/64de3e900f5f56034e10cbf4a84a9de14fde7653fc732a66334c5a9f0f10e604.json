{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hard-Worker\\\\Desktop\\\\rural-business-directory\\\\src\\\\pages\\\\AdminPage.js\";\nimport React from 'react';\nimport BusinessFileImporter from '../components/BusinessFileImporter'; // Assuming path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ADMIN_DATA_KEY = 'importedBusinessesData';\nconst INDUSTRIES_METADATA_KEY = 'importedIndustriesMetadata';\nconst STATES_METADATA_KEY = 'importedStatesMetadata';\nconst REGIONS_METADATA_KEY = 'importedRegionsMetadata';\nconst AdminPage = () => {\n  const handleImportComplete = result => {\n    if (result && result.businesses) {\n      console.log('Imported businesses:', result.businesses);\n      try {\n        // Store main business data\n        localStorage.setItem(ADMIN_DATA_KEY, JSON.stringify(result.businesses));\n\n        // Derive and store metadata\n        const allIndustries = new Set();\n        const allStates = new Set();\n        const allRegions = new Set();\n        result.businesses.forEach(business => {\n          var _business$location, _business$location2;\n          if (business.industry) {\n            allIndustries.add(business.industry);\n          }\n          if ((_business$location = business.location) !== null && _business$location !== void 0 && _business$location.state) {\n            allStates.add(business.location.state);\n          }\n          if ((_business$location2 = business.location) !== null && _business$location2 !== void 0 && _business$location2.region) {\n            allRegions.add(business.location.region);\n          }\n        });\n\n        // Storing metadata as simple arrays of strings.\n        // The useBusinessData hook might expect objects like { id: '...', name: '...' }\n        // This might need adjustment later based on how FilterSidebar consumes this.\n        // For now, let's store them as arrays of unique strings.\n        // The `industries` from useBusinessData was assumed to be [{id, name, icon}].\n        // Let's prepare a slightly more structured metadata for industries.\n        const industriesForStorage = Array.from(allIndustries).map(name => ({\n          id: name.toLowerCase().replace(/\\s+/g, '-'),\n          name: name,\n          icon: '🏢' /* Default icon */\n        }));\n        const statesForStorage = Array.from(allStates).map(name => ({\n          id: name,\n          name: name\n        })); // Assuming state name is its ID\n        const regionsForStorage = Array.from(allRegions).map(name => ({\n          id: name.toLowerCase().replace(/\\s+/g, '-'),\n          name: name\n        }));\n        localStorage.setItem(INDUSTRIES_METADATA_KEY, JSON.stringify(industriesForStorage));\n        localStorage.setItem(STATES_METADATA_KEY, JSON.stringify(statesForStorage));\n        localStorage.setItem(REGIONS_METADATA_KEY, JSON.stringify(regionsForStorage));\n        alert(`Successfully imported and stored ${result.businesses.length} businesses and derived metadata in localStorage. You might need to refresh other pages to see changes.`);\n        console.log('Industries stored:', industriesForStorage);\n        console.log('States stored:', statesForStorage);\n        console.log('Regions stored:', regionsForStorage);\n      } catch (e) {\n        console.error('Failed to save imported data to localStorage:', e);\n        alert('Failed to save data to localStorage. Check console for details.');\n      }\n    } else {\n      console.error('Import result is invalid:', result);\n      alert('Import completed, but no business data was found in the result.');\n    }\n  };\n  const handleImportError = error => {\n    console.error('Import error:', error);\n    alert(`Import failed: ${error.message}`);\n  };\n  const clearImportedData = () => {\n    try {\n      localStorage.removeItem(ADMIN_DATA_KEY);\n      localStorage.removeItem(INDUSTRIES_METADATA_KEY);\n      localStorage.removeItem(STATES_METADATA_KEY);\n      localStorage.removeItem(REGIONS_METADATA_KEY);\n      alert('Imported business data and metadata cleared from localStorage. Refresh other pages to see changes.');\n      console.log('Cleared imported data from localStorage.');\n    } catch (e) {\n      console.error('Failed to clear data from localStorage:', e);\n      alert('Failed to clear data from localStorage. Check console for details.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white shadow-xl rounded-lg p-6 md:p-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold text-stone-800 mb-8 text-center\",\n        children: \"Admin Data Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"mb-12\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-semibold text-stone-700 mb-4\",\n          children: \"Import Business Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-stone-600 mb-6\",\n          children: \"Upload a CSV or Excel file containing business listings. The data will be stored in your browser's local storage and used throughout the application.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BusinessFileImporter, {\n          onImportComplete: handleImportComplete,\n          onError: handleImportError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-semibold text-stone-700 mb-4\",\n          children: \"Manage Local Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-stone-600 mb-6\",\n          children: \"If you need to clear the imported data from your browser to start fresh or to revert to any default data behavior, use the button below.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clearImportedData,\n          className: \"px-6 py-3 bg-red-600 hover:bg-red-700 text-white font-medium rounded-lg shadow transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2\",\n          children: \"Clear Imported Data from LocalStorage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_c = AdminPage;\nexport default AdminPage;\nvar _c;\n$RefreshReg$(_c, \"AdminPage\");","map":{"version":3,"names":["React","BusinessFileImporter","jsxDEV","_jsxDEV","ADMIN_DATA_KEY","INDUSTRIES_METADATA_KEY","STATES_METADATA_KEY","REGIONS_METADATA_KEY","AdminPage","handleImportComplete","result","businesses","console","log","localStorage","setItem","JSON","stringify","allIndustries","Set","allStates","allRegions","forEach","business","_business$location","_business$location2","industry","add","location","state","region","industriesForStorage","Array","from","map","name","id","toLowerCase","replace","icon","statesForStorage","regionsForStorage","alert","length","e","error","handleImportError","message","clearImportedData","removeItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onImportComplete","onError","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Hard-Worker/Desktop/rural-business-directory/src/pages/AdminPage.js"],"sourcesContent":["import React from 'react';\r\nimport BusinessFileImporter from '../components/BusinessFileImporter'; // Assuming path is correct\r\n\r\nconst ADMIN_DATA_KEY = 'importedBusinessesData';\r\nconst INDUSTRIES_METADATA_KEY = 'importedIndustriesMetadata';\r\nconst STATES_METADATA_KEY = 'importedStatesMetadata';\r\nconst REGIONS_METADATA_KEY = 'importedRegionsMetadata';\r\n\r\nconst AdminPage = () => {\r\n  const handleImportComplete = (result) => {\r\n    if (result && result.businesses) {\r\n      console.log('Imported businesses:', result.businesses);\r\n      try {\r\n        // Store main business data\r\n        localStorage.setItem(ADMIN_DATA_KEY, JSON.stringify(result.businesses));\r\n\r\n        // Derive and store metadata\r\n        const allIndustries = new Set();\r\n        const allStates = new Set();\r\n        const allRegions = new Set();\r\n\r\n        result.businesses.forEach(business => {\r\n          if (business.industry) {\r\n            allIndustries.add(business.industry);\r\n          }\r\n          if (business.location?.state) {\r\n            allStates.add(business.location.state);\r\n          }\r\n          if (business.location?.region) {\r\n            allRegions.add(business.location.region);\r\n          }\r\n        });\r\n\r\n        // Storing metadata as simple arrays of strings.\r\n        // The useBusinessData hook might expect objects like { id: '...', name: '...' }\r\n        // This might need adjustment later based on how FilterSidebar consumes this.\r\n        // For now, let's store them as arrays of unique strings.\r\n        // The `industries` from useBusinessData was assumed to be [{id, name, icon}].\r\n        // Let's prepare a slightly more structured metadata for industries.\r\n        const industriesForStorage = Array.from(allIndustries).map(name => ({ id: name.toLowerCase().replace(/\\s+/g, '-'), name: name, icon: '🏢' /* Default icon */ }));\r\n        const statesForStorage = Array.from(allStates).map(name => ({ id: name, name: name })); // Assuming state name is its ID\r\n        const regionsForStorage = Array.from(allRegions).map(name => ({ id: name.toLowerCase().replace(/\\s+/g, '-'), name: name }));\r\n\r\n\r\n        localStorage.setItem(INDUSTRIES_METADATA_KEY, JSON.stringify(industriesForStorage));\r\n        localStorage.setItem(STATES_METADATA_KEY, JSON.stringify(statesForStorage));\r\n        localStorage.setItem(REGIONS_METADATA_KEY, JSON.stringify(regionsForStorage));\r\n\r\n        alert(`Successfully imported and stored ${result.businesses.length} businesses and derived metadata in localStorage. You might need to refresh other pages to see changes.`);\r\n        console.log('Industries stored:', industriesForStorage);\r\n        console.log('States stored:', statesForStorage);\r\n        console.log('Regions stored:', regionsForStorage);\r\n\r\n      } catch (e) {\r\n        console.error('Failed to save imported data to localStorage:', e);\r\n        alert('Failed to save data to localStorage. Check console for details.');\r\n      }\r\n    } else {\r\n      console.error('Import result is invalid:', result);\r\n      alert('Import completed, but no business data was found in the result.');\r\n    }\r\n  };\r\n\r\n  const handleImportError = (error) => {\r\n    console.error('Import error:', error);\r\n    alert(`Import failed: ${error.message}`);\r\n  };\r\n\r\n  const clearImportedData = () => {\r\n    try {\r\n      localStorage.removeItem(ADMIN_DATA_KEY);\r\n      localStorage.removeItem(INDUSTRIES_METADATA_KEY);\r\n      localStorage.removeItem(STATES_METADATA_KEY);\r\n      localStorage.removeItem(REGIONS_METADATA_KEY);\r\n      alert('Imported business data and metadata cleared from localStorage. Refresh other pages to see changes.');\r\n      console.log('Cleared imported data from localStorage.');\r\n    } catch (e) {\r\n      console.error('Failed to clear data from localStorage:', e);\r\n      alert('Failed to clear data from localStorage. Check console for details.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n      <div className=\"bg-white shadow-xl rounded-lg p-6 md:p-8\">\r\n        <h1 className=\"text-3xl font-bold text-stone-800 mb-8 text-center\">\r\n          Admin Data Management\r\n        </h1>\r\n        \r\n        <section className=\"mb-12\">\r\n          <h2 className=\"text-2xl font-semibold text-stone-700 mb-4\">\r\n            Import Business Data\r\n          </h2>\r\n          <p className=\"text-stone-600 mb-6\">\r\n            Upload a CSV or Excel file containing business listings. The data will be stored\r\n            in your browser's local storage and used throughout the application.\r\n          </p>\r\n          <BusinessFileImporter \r\n            onImportComplete={handleImportComplete}\r\n            onError={handleImportError}\r\n          />\r\n        </section>\r\n\r\n        <section>\r\n          <h2 className=\"text-2xl font-semibold text-stone-700 mb-4\">\r\n            Manage Local Data\r\n          </h2>\r\n          <p className=\"text-stone-600 mb-6\">\r\n            If you need to clear the imported data from your browser to start fresh or\r\n            to revert to any default data behavior, use the button below.\r\n          </p>\r\n          <button\r\n            onClick={clearImportedData}\r\n            className=\"px-6 py-3 bg-red-600 hover:bg-red-700 text-white font-medium rounded-lg shadow transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2\"\r\n          >\r\n            Clear Imported Data from LocalStorage\r\n          </button>\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}