{"ast":null,"code":"/**\n * Utility functions for searching and filtering business data\n *//**\n * Filters businesses based on search criteria\n * @param {Array} businesses - Array of business objects\n * @param {Object} filters - Filter criteria object\n * @returns {Array} Filtered array of businesses\n */export const filterBusinesses=(businesses,filters)=>{const{searchTerm,selectedStates,selectedIndustries,selectedRegions}=filters;return businesses.filter(business=>{// Text search across multiple fields\nconst matchesSearch=!searchTerm||business.name.toLowerCase().includes(searchTerm.toLowerCase())||business.description.toLowerCase().includes(searchTerm.toLowerCase())||business.tagline.toLowerCase().includes(searchTerm.toLowerCase())||business.location.town.toLowerCase().includes(searchTerm.toLowerCase())||business.location.region.toLowerCase().includes(searchTerm.toLowerCase())||business.categories.primary.toLowerCase().includes(searchTerm.toLowerCase())||business.tags.services.some(service=>service.toLowerCase().includes(searchTerm.toLowerCase()));// State filter\nconst matchesState=selectedStates.length===0||selectedStates.includes(business.location.state);// Industry filter\nconst matchesIndustry=selectedIndustries.length===0||selectedIndustries.includes(business.industry);// Region filter\nconst matchesRegion=selectedRegions.length===0||selectedRegions.includes(business.location.region);return matchesSearch&&matchesState&&matchesIndustry&&matchesRegion;});};/**\n * Sorts businesses by specified criteria\n * @param {Array} businesses - Array of business objects\n * @param {string} sortBy - Sort criteria ('name', 'location', 'industry')\n * @returns {Array} Sorted array of businesses\n */export const sortBusinesses=(businesses,sortBy)=>{const sorted=[...businesses];switch(sortBy){case'name':return sorted.sort((a,b)=>a.name.localeCompare(b.name));case'location':return sorted.sort((a,b)=>{const locationA=\"\".concat(a.location.town,\", \").concat(a.location.state);const locationB=\"\".concat(b.location.town,\", \").concat(b.location.state);return locationA.localeCompare(locationB);});case'industry':return sorted.sort((a,b)=>a.industry.localeCompare(b.industry));default:return sorted;}};/**\n * Gets unique values from business data for filter options\n * @param {Array} businesses - Array of business objects\n * @param {string} field - Field to extract unique values from\n * @returns {Array} Array of unique values\n */export const getUniqueValues=(businesses,field)=>{const values=new Set();businesses.forEach(business=>{switch(field){case'states':values.add(business.location.state);break;case'regions':values.add(business.location.region);break;case'industries':values.add(business.industry);break;case'towns':values.add(business.location.town);break;default:break;}});return Array.from(values).sort();};/**\n * Validates search input and sanitizes it\n * @param {string} input - User search input\n * @returns {string} Sanitized search term\n */export const sanitizeSearchInput=input=>{if(!input||typeof input!=='string')return'';// Remove potentially harmful characters and trim whitespace\nreturn input.trim().replace(/[<>]/g,'');};/**\n * Debounce function to limit search frequency\n * @param {Function} func - Function to debounce\n * @param {number} delay - Delay in milliseconds\n * @returns {Function} Debounced function\n */export const debounce=(func,delay)=>{let timeoutId;return function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}clearTimeout(timeoutId);timeoutId=setTimeout(()=>func.apply(null,args),delay);};};/**\n * Formats location string for display\n * @param {Object} location - Location object with town, state, region\n * @returns {string} Formatted location string\n */export const formatLocation=location=>{return\"\".concat(location.town,\", \").concat(location.state);};/**\n * Formats location with region for detailed display\n * @param {Object} location - Location object with town, state, region\n * @returns {string} Formatted location string with region\n */export const formatLocationWithRegion=location=>{return\"\".concat(location.town,\", \").concat(location.region,\", \").concat(location.state);};/**\n * Truncates text to specified length with ellipsis\n * @param {string} text - Text to truncate\n * @param {number} maxLength - Maximum length before truncation\n * @returns {string} Truncated text\n */export const truncateText=(text,maxLength)=>{if(!text||text.length<=maxLength)return text;return text.substring(0,maxLength-3)+'...';};","map":{"version":3,"names":["filterBusinesses","businesses","filters","searchTerm","selectedStates","selectedIndustries","selectedRegions","filter","business","matchesSearch","name","toLowerCase","includes","description","tagline","location","town","region","categories","primary","tags","services","some","service","matchesState","length","state","matchesIndustry","industry","matchesRegion","sortBusinesses","sortBy","sorted","sort","a","b","localeCompare","locationA","concat","locationB","getUniqueValues","field","values","Set","forEach","add","Array","from","sanitizeSearchInput","input","trim","replace","debounce","func","delay","timeoutId","_len","arguments","args","_key","clearTimeout","setTimeout","apply","formatLocation","formatLocationWithRegion","truncateText","text","maxLength","substring"],"sources":["C:/Users/Hard-Worker/Desktop/rural-business-directory/src/utils/searchUtils.js"],"sourcesContent":["/**\n * Utility functions for searching and filtering business data\n */\n\n/**\n * Filters businesses based on search criteria\n * @param {Array} businesses - Array of business objects\n * @param {Object} filters - Filter criteria object\n * @returns {Array} Filtered array of businesses\n */\nexport const filterBusinesses = (businesses, filters) => {\n  const { searchTerm, selectedStates, selectedIndustries, selectedRegions } = filters;\n\n  return businesses.filter(business => {\n    // Text search across multiple fields\n    const matchesSearch = !searchTerm || \n      business.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      business.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      business.tagline.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      business.location.town.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      business.location.region.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      business.categories.primary.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      business.tags.services.some(service => \n        service.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n\n    // State filter\n    const matchesState = selectedStates.length === 0 || \n      selectedStates.includes(business.location.state);\n\n    // Industry filter\n    const matchesIndustry = selectedIndustries.length === 0 || \n      selectedIndustries.includes(business.industry);\n\n    // Region filter\n    const matchesRegion = selectedRegions.length === 0 || \n      selectedRegions.includes(business.location.region);\n\n    return matchesSearch && matchesState && matchesIndustry && matchesRegion;\n  });\n};\n\n/**\n * Sorts businesses by specified criteria\n * @param {Array} businesses - Array of business objects\n * @param {string} sortBy - Sort criteria ('name', 'location', 'industry')\n * @returns {Array} Sorted array of businesses\n */\nexport const sortBusinesses = (businesses, sortBy) => {\n  const sorted = [...businesses];\n\n  switch (sortBy) {\n    case 'name':\n      return sorted.sort((a, b) => a.name.localeCompare(b.name));\n    case 'location':\n      return sorted.sort((a, b) => {\n        const locationA = `${a.location.town}, ${a.location.state}`;\n        const locationB = `${b.location.town}, ${b.location.state}`;\n        return locationA.localeCompare(locationB);\n      });\n    case 'industry':\n      return sorted.sort((a, b) => a.industry.localeCompare(b.industry));\n    default:\n      return sorted;\n  }\n};\n\n/**\n * Gets unique values from business data for filter options\n * @param {Array} businesses - Array of business objects\n * @param {string} field - Field to extract unique values from\n * @returns {Array} Array of unique values\n */\nexport const getUniqueValues = (businesses, field) => {\n  const values = new Set();\n  \n  businesses.forEach(business => {\n    switch (field) {\n      case 'states':\n        values.add(business.location.state);\n        break;\n      case 'regions':\n        values.add(business.location.region);\n        break;\n      case 'industries':\n        values.add(business.industry);\n        break;\n      case 'towns':\n        values.add(business.location.town);\n        break;\n      default:\n        break;\n    }\n  });\n\n  return Array.from(values).sort();\n};\n\n/**\n * Validates search input and sanitizes it\n * @param {string} input - User search input\n * @returns {string} Sanitized search term\n */\nexport const sanitizeSearchInput = (input) => {\n  if (!input || typeof input !== 'string') return '';\n  \n  // Remove potentially harmful characters and trim whitespace\n  return input.trim().replace(/[<>]/g, '');\n};\n\n/**\n * Debounce function to limit search frequency\n * @param {Function} func - Function to debounce\n * @param {number} delay - Delay in milliseconds\n * @returns {Function} Debounced function\n */\nexport const debounce = (func, delay) => {\n  let timeoutId;\n  \n  return (...args) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func.apply(null, args), delay);\n  };\n};\n\n/**\n * Formats location string for display\n * @param {Object} location - Location object with town, state, region\n * @returns {string} Formatted location string\n */\nexport const formatLocation = (location) => {\n  return `${location.town}, ${location.state}`;\n};\n\n/**\n * Formats location with region for detailed display\n * @param {Object} location - Location object with town, state, region\n * @returns {string} Formatted location string with region\n */\nexport const formatLocationWithRegion = (location) => {\n  return `${location.town}, ${location.region}, ${location.state}`;\n};\n\n/**\n * Truncates text to specified length with ellipsis\n * @param {string} text - Text to truncate\n * @param {number} maxLength - Maximum length before truncation\n * @returns {string} Truncated text\n */\nexport const truncateText = (text, maxLength) => {\n  if (!text || text.length <= maxLength) return text;\n  return text.substring(0, maxLength - 3) + '...';\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}